---
# Include variables at the start so they're in scope
- name: Include OS-Specific variables
  include_vars: "{{ ansible_os_family }}.yml"

- include: get_db2.yml
  tags: download

- include: packages-redhat.yml
  when: ansible_os_family == "RedHat"

- include: packages-debian.yml
  when: ansible_os_family == "Debian"

- include: instance_users.yml
  tags: ['users', 'setup']

- name: SELinux - Disabling or Put in permissive mode, logging actions that would be blocked.
  selinux:
    state: "{{ db2_selinux_state }}"
    policy: targeted
  tags: ['dont-on-docker', 'setup']
  when: ansible_os_family == "RedHat"

- name: Adding entry to /etc/hosts
  lineinfile:
    dest: /etc/hosts
    regexp: "^{{ ansible_default_ipv4.address }} {{ ansible_hostname }}$"
    line: "{{ ansible_default_ipv4.address }} {{ ansible_hostname }}"
  tags: ['dont-on-docker', 'setup']

- name: Running DB2 Pre Requisits Check
  command: "{{ db2_binary.dest }}/{{ db2_creates }}/db2prereqcheck -i -s"
  register: precheck
  failed_when: "'failed' in precheck.stderr"
  changed_when: False
  tags: setup

- name: Parse response file
  template:
   src: db2server.j2.rsp
   dest: "{{ db2_respons_locations }}"
  tags: parse

- name: Installing DB2 #todo add version variable
  command: "{{ db2_binary.dest }}/{{ db2_creates }}/db2setup -r {{ db2_respons_locations }}"
  register: db2_setup
  args:
    creates: "{{ resp.file }}"
  tags: install

- name: Setup results
  debug:
    var: db2_setup
  tags: download

- name: DB2 - Validating the current installation
  command: "{{ resp.file }}/bin/db2val -o"
  register: db2_val
  failed_when: "'DBI1335I' not in db2_val.stdout"
  changed_when: False
  tags: ['install', 'validate']

- name: Validate results
  debug:
    var: db2_val
  tags: download

- include: create_databases.yml
  when: databases is defined
  tags: databases

- import_tasks: license_db2.yml
  tags: licensedb2
  when: db2_license_binary.url is defined
